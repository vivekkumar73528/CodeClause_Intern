import java.io.InputStream;
import java.security.SecureRandom;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class GeneratePassword {
    public static void main(String rgs[]) {
        String pass = GenerateSecurePassword();

        System.out.println("Password generated by Custom Utility Method is:"+pass);

    }

    public static String GenerateSecurePassword() {

        Stream<Character> demoPassword = Stream.concat(getRandomNumbers(2),
        Stream.concat(getRandomSpecialChars(2),
        Stream.concat(getRandomAlphabets(2,true),getRandomAlphabets(2,false))));

        List<Character> listOfChar = demoPassword.collect(Collectors.toList());

        Collections.shuffle(listOfChar);

        String password = listOfChar.stream().collect(StringBuilder::new, StringBuilder::append, StringBuilder::append).toString();

        return password;
    }

    public static Stream<Character> getRandomSpecialChars(int length) {

        Stream<Character> specialCharsStream;

        Random random = new SecureRandom();

        IntStream specialChars = random.ints(length, 33, 45);

        specialCharsStream = specialChars.mapToObj(data -> (char) data);

        return specialCharsStream;
    }

    public static Stream<Character> getRandomNumbers(int length) {

        Stream<Character> numberStream;

        Random random = new SecureRandom();

        IntStream numberIntStream = random.ints(length, 48, 57);

        numberStream = numberIntStream.mapToObj(data -> (char) data);

        return numberStream;
    }

    public static Stream<Character> getRandomAlphabets(int length, boolean cheak) {

        Stream<Character> lowerUpperStream;

        if(cheak == true) {

            Random random = new SecureRandom();

            IntStream ICaseStream = random.ints(length,'a','z');

            lowerUpperStream = ICaseStream.mapToObj(data -> (char) data);

        } 

        else {

            Random random = new SecureRandom();

            IntStream uCaseStream = random.ints(length,'A','Z');

            lowerUpperStream = uCaseStream.mapToObj(data -> (char) data);

        }

        return lowerUpperStream;

    }
    
}

    
